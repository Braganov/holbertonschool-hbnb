import os
from app import create_app
from sqlalchemy import create_engine, text

DB_NAME = "hbnb_db"
SQL_SCRIPT_PATH = "hbnb_schema.sql"

def reset_database():
    """V√©rifie et recr√©e la base de donn√©es si elle n'existe pas."""
    
    # üìå Connexion directe √† MySQL sans base
    engine = create_engine("mysql+pymysql://debian-sys-maint:fB33r9vNp0V8hA8M@localhost/")

    with engine.connect() as connection:
        try:
            # V√©rifier si la base existe
            result = connection.execute(text(f"SHOW DATABASES LIKE '{DB_NAME}';"))
            db_exists = result.fetchone()

            if not db_exists:
                print(f"üîÑ La base {DB_NAME} n'existe pas, cr√©ation en cours...")
                connection.execute(text(f"CREATE DATABASE {DB_NAME};"))
                print(f"‚úÖ Base de donn√©es {DB_NAME} cr√©√©e.")

        except Exception as e:
            print(f"‚ùå ERREUR LORS DE LA CR√âATION DE LA BASE : {e}")
            return

    # üìå Maintenant, on peut attacher Flask √† la base et ex√©cuter le script SQL
    app = create_app()
    with app.app_context():
        with app.extensions['sqlalchemy'].engine.connect() as connection:
            print(f"üîÑ Ex√©cution du script SQL sur {DB_NAME}...")
            try:
                with open(SQL_SCRIPT_PATH, "r") as sql_file:
                    sql_commands = sql_file.read().split(";")
                for command in sql_commands:
                    if command.strip():
                        connection.execute(text(command))
                print("‚úÖ Base de donn√©es initialis√©e avec succ√®s.")
            except Exception as e:
                print(f"‚ùå ERREUR LORS DE L'EX√âCUTION DU SCRIPT SQL : {e}")

if __name__ == "__main__":
    reset_database()
